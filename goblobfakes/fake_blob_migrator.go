// Copyright 2017-Present Pivotal Software, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http:#www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was generated by counterfeiter
package goblobfakes

import (
	"sync"

	"github.com/pivotal-cf/goblob"
	"github.com/pivotal-cf/goblob/blobstore"
)

type FakeBlobMigrator struct {
	MigrateStub        func(blob *blobstore.Blob) error
	migrateMutex       sync.RWMutex
	migrateArgsForCall []struct {
		blob *blobstore.Blob
	}
	migrateReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlobMigrator) Migrate(blob *blobstore.Blob) error {
	fake.migrateMutex.Lock()
	fake.migrateArgsForCall = append(fake.migrateArgsForCall, struct {
		blob *blobstore.Blob
	}{blob})
	fake.recordInvocation("Migrate", []interface{}{blob})
	fake.migrateMutex.Unlock()
	if fake.MigrateStub != nil {
		return fake.MigrateStub(blob)
	} else {
		return fake.migrateReturns.result1
	}
}

func (fake *FakeBlobMigrator) MigrateCallCount() int {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	return len(fake.migrateArgsForCall)
}

func (fake *FakeBlobMigrator) MigrateArgsForCall(i int) *blobstore.Blob {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	return fake.migrateArgsForCall[i].blob
}

func (fake *FakeBlobMigrator) MigrateReturns(result1 error) {
	fake.MigrateStub = nil
	fake.migrateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlobMigrator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBlobMigrator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ goblob.BlobMigrator = new(FakeBlobMigrator)
