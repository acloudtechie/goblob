// This file was generated by counterfeiter
package goblobfakes

import (
	"sync"

	"github.com/c0-ops/goblob"
)

type FakeBlobMigrator struct {
	MigrateSingleBlobStub        func(blob *goblob.Blob) error
	migrateSingleBlobMutex       sync.RWMutex
	migrateSingleBlobArgsForCall []struct {
		blob *goblob.Blob
	}
	migrateSingleBlobReturns struct {
		result1 error
	}
	SingleBlobErrorStub        func(blob *goblob.Blob, err error) error
	singleBlobErrorMutex       sync.RWMutex
	singleBlobErrorArgsForCall []struct {
		blob *goblob.Blob
		err  error
	}
	singleBlobErrorReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlobMigrator) MigrateSingleBlob(blob *goblob.Blob) error {
	fake.migrateSingleBlobMutex.Lock()
	fake.migrateSingleBlobArgsForCall = append(fake.migrateSingleBlobArgsForCall, struct {
		blob *goblob.Blob
	}{blob})
	fake.recordInvocation("MigrateSingleBlob", []interface{}{blob})
	fake.migrateSingleBlobMutex.Unlock()
	if fake.MigrateSingleBlobStub != nil {
		return fake.MigrateSingleBlobStub(blob)
	} else {
		return fake.migrateSingleBlobReturns.result1
	}
}

func (fake *FakeBlobMigrator) MigrateSingleBlobCallCount() int {
	fake.migrateSingleBlobMutex.RLock()
	defer fake.migrateSingleBlobMutex.RUnlock()
	return len(fake.migrateSingleBlobArgsForCall)
}

func (fake *FakeBlobMigrator) MigrateSingleBlobArgsForCall(i int) *goblob.Blob {
	fake.migrateSingleBlobMutex.RLock()
	defer fake.migrateSingleBlobMutex.RUnlock()
	return fake.migrateSingleBlobArgsForCall[i].blob
}

func (fake *FakeBlobMigrator) MigrateSingleBlobReturns(result1 error) {
	fake.MigrateSingleBlobStub = nil
	fake.migrateSingleBlobReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlobMigrator) SingleBlobError(blob *goblob.Blob, err error) error {
	fake.singleBlobErrorMutex.Lock()
	fake.singleBlobErrorArgsForCall = append(fake.singleBlobErrorArgsForCall, struct {
		blob *goblob.Blob
		err  error
	}{blob, err})
	fake.recordInvocation("SingleBlobError", []interface{}{blob, err})
	fake.singleBlobErrorMutex.Unlock()
	if fake.SingleBlobErrorStub != nil {
		return fake.SingleBlobErrorStub(blob, err)
	} else {
		return fake.singleBlobErrorReturns.result1
	}
}

func (fake *FakeBlobMigrator) SingleBlobErrorCallCount() int {
	fake.singleBlobErrorMutex.RLock()
	defer fake.singleBlobErrorMutex.RUnlock()
	return len(fake.singleBlobErrorArgsForCall)
}

func (fake *FakeBlobMigrator) SingleBlobErrorArgsForCall(i int) (*goblob.Blob, error) {
	fake.singleBlobErrorMutex.RLock()
	defer fake.singleBlobErrorMutex.RUnlock()
	return fake.singleBlobErrorArgsForCall[i].blob, fake.singleBlobErrorArgsForCall[i].err
}

func (fake *FakeBlobMigrator) SingleBlobErrorReturns(result1 error) {
	fake.SingleBlobErrorStub = nil
	fake.singleBlobErrorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlobMigrator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.migrateSingleBlobMutex.RLock()
	defer fake.migrateSingleBlobMutex.RUnlock()
	fake.singleBlobErrorMutex.RLock()
	defer fake.singleBlobErrorMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBlobMigrator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ goblob.BlobMigrator = new(FakeBlobMigrator)
