// Copyright 2017-Present Pivotal Software, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http:#www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was generated by counterfeiter
package goblobfakes

import (
	"sync"

	"github.com/pivotalservices/goblob"
	"github.com/pivotalservices/goblob/blobstore"
)

type FakeBlobstoreMigrationWatcher struct {
	MigrationDidStartStub        func(blobstore.Blobstore, blobstore.Blobstore)
	migrationDidStartMutex       sync.RWMutex
	migrationDidStartArgsForCall []struct {
		arg1 blobstore.Blobstore
		arg2 blobstore.Blobstore
	}
	MigrationDidFinishStub           func()
	migrationDidFinishMutex          sync.RWMutex
	migrationDidFinishArgsForCall    []struct{}
	MigrateBucketDidStartStub        func(string)
	migrateBucketDidStartMutex       sync.RWMutex
	migrateBucketDidStartArgsForCall []struct {
		arg1 string
	}
	MigrateBucketDidFinishStub             func()
	migrateBucketDidFinishMutex            sync.RWMutex
	migrateBucketDidFinishArgsForCall      []struct{}
	MigrateBlobDidFailWithErrorStub        func(error)
	migrateBlobDidFailWithErrorMutex       sync.RWMutex
	migrateBlobDidFailWithErrorArgsForCall []struct {
		arg1 error
	}
	MigrateBlobDidFinishStub                  func()
	migrateBlobDidFinishMutex                 sync.RWMutex
	migrateBlobDidFinishArgsForCall           []struct{}
	MigrateBlobDidFinishPreviouslyStub        func()
	migrateBlobDidFinishPreviouslyMutex       sync.RWMutex
	migrateBlobDidFinishPreviouslyArgsForCall []struct{}
	invocations                               map[string][][]interface{}
	invocationsMutex                          sync.RWMutex
}

func (fake *FakeBlobstoreMigrationWatcher) MigrationDidStart(arg1 blobstore.Blobstore, arg2 blobstore.Blobstore) {
	fake.migrationDidStartMutex.Lock()
	fake.migrationDidStartArgsForCall = append(fake.migrationDidStartArgsForCall, struct {
		arg1 blobstore.Blobstore
		arg2 blobstore.Blobstore
	}{arg1, arg2})
	fake.recordInvocation("MigrationDidStart", []interface{}{arg1, arg2})
	fake.migrationDidStartMutex.Unlock()
	if fake.MigrationDidStartStub != nil {
		fake.MigrationDidStartStub(arg1, arg2)
	}
}

func (fake *FakeBlobstoreMigrationWatcher) MigrationDidStartCallCount() int {
	fake.migrationDidStartMutex.RLock()
	defer fake.migrationDidStartMutex.RUnlock()
	return len(fake.migrationDidStartArgsForCall)
}

func (fake *FakeBlobstoreMigrationWatcher) MigrationDidStartArgsForCall(i int) (blobstore.Blobstore, blobstore.Blobstore) {
	fake.migrationDidStartMutex.RLock()
	defer fake.migrationDidStartMutex.RUnlock()
	return fake.migrationDidStartArgsForCall[i].arg1, fake.migrationDidStartArgsForCall[i].arg2
}

func (fake *FakeBlobstoreMigrationWatcher) MigrationDidFinish() {
	fake.migrationDidFinishMutex.Lock()
	fake.migrationDidFinishArgsForCall = append(fake.migrationDidFinishArgsForCall, struct{}{})
	fake.recordInvocation("MigrationDidFinish", []interface{}{})
	fake.migrationDidFinishMutex.Unlock()
	if fake.MigrationDidFinishStub != nil {
		fake.MigrationDidFinishStub()
	}
}

func (fake *FakeBlobstoreMigrationWatcher) MigrationDidFinishCallCount() int {
	fake.migrationDidFinishMutex.RLock()
	defer fake.migrationDidFinishMutex.RUnlock()
	return len(fake.migrationDidFinishArgsForCall)
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBucketDidStart(arg1 string) {
	fake.migrateBucketDidStartMutex.Lock()
	fake.migrateBucketDidStartArgsForCall = append(fake.migrateBucketDidStartArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("MigrateBucketDidStart", []interface{}{arg1})
	fake.migrateBucketDidStartMutex.Unlock()
	if fake.MigrateBucketDidStartStub != nil {
		fake.MigrateBucketDidStartStub(arg1)
	}
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBucketDidStartCallCount() int {
	fake.migrateBucketDidStartMutex.RLock()
	defer fake.migrateBucketDidStartMutex.RUnlock()
	return len(fake.migrateBucketDidStartArgsForCall)
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBucketDidStartArgsForCall(i int) string {
	fake.migrateBucketDidStartMutex.RLock()
	defer fake.migrateBucketDidStartMutex.RUnlock()
	return fake.migrateBucketDidStartArgsForCall[i].arg1
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBucketDidFinish() {
	fake.migrateBucketDidFinishMutex.Lock()
	fake.migrateBucketDidFinishArgsForCall = append(fake.migrateBucketDidFinishArgsForCall, struct{}{})
	fake.recordInvocation("MigrateBucketDidFinish", []interface{}{})
	fake.migrateBucketDidFinishMutex.Unlock()
	if fake.MigrateBucketDidFinishStub != nil {
		fake.MigrateBucketDidFinishStub()
	}
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBucketDidFinishCallCount() int {
	fake.migrateBucketDidFinishMutex.RLock()
	defer fake.migrateBucketDidFinishMutex.RUnlock()
	return len(fake.migrateBucketDidFinishArgsForCall)
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBlobDidFailWithError(arg1 error) {
	fake.migrateBlobDidFailWithErrorMutex.Lock()
	fake.migrateBlobDidFailWithErrorArgsForCall = append(fake.migrateBlobDidFailWithErrorArgsForCall, struct {
		arg1 error
	}{arg1})
	fake.recordInvocation("MigrateBlobDidFailWithError", []interface{}{arg1})
	fake.migrateBlobDidFailWithErrorMutex.Unlock()
	if fake.MigrateBlobDidFailWithErrorStub != nil {
		fake.MigrateBlobDidFailWithErrorStub(arg1)
	}
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBlobDidFailWithErrorCallCount() int {
	fake.migrateBlobDidFailWithErrorMutex.RLock()
	defer fake.migrateBlobDidFailWithErrorMutex.RUnlock()
	return len(fake.migrateBlobDidFailWithErrorArgsForCall)
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBlobDidFailWithErrorArgsForCall(i int) error {
	fake.migrateBlobDidFailWithErrorMutex.RLock()
	defer fake.migrateBlobDidFailWithErrorMutex.RUnlock()
	return fake.migrateBlobDidFailWithErrorArgsForCall[i].arg1
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBlobDidFinish() {
	fake.migrateBlobDidFinishMutex.Lock()
	fake.migrateBlobDidFinishArgsForCall = append(fake.migrateBlobDidFinishArgsForCall, struct{}{})
	fake.recordInvocation("MigrateBlobDidFinish", []interface{}{})
	fake.migrateBlobDidFinishMutex.Unlock()
	if fake.MigrateBlobDidFinishStub != nil {
		fake.MigrateBlobDidFinishStub()
	}
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBlobDidFinishCallCount() int {
	fake.migrateBlobDidFinishMutex.RLock()
	defer fake.migrateBlobDidFinishMutex.RUnlock()
	return len(fake.migrateBlobDidFinishArgsForCall)
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBlobAlreadyFinished() {
	fake.migrateBlobDidFinishPreviouslyMutex.Lock()
	fake.migrateBlobDidFinishPreviouslyArgsForCall = append(fake.migrateBlobDidFinishPreviouslyArgsForCall, struct{}{})
	fake.recordInvocation("MigrateBlobDidFinishPreviously", []interface{}{})
	fake.migrateBlobDidFinishPreviouslyMutex.Unlock()
	if fake.MigrateBlobDidFinishPreviouslyStub != nil {
		fake.MigrateBlobDidFinishPreviouslyStub()
	}
}

func (fake *FakeBlobstoreMigrationWatcher) MigrateBlobDidFinishPreviouslyCallCount() int {
	fake.migrateBlobDidFinishPreviouslyMutex.RLock()
	defer fake.migrateBlobDidFinishPreviouslyMutex.RUnlock()
	return len(fake.migrateBlobDidFinishPreviouslyArgsForCall)
}

func (fake *FakeBlobstoreMigrationWatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.migrationDidStartMutex.RLock()
	defer fake.migrationDidStartMutex.RUnlock()
	fake.migrationDidFinishMutex.RLock()
	defer fake.migrationDidFinishMutex.RUnlock()
	fake.migrateBucketDidStartMutex.RLock()
	defer fake.migrateBucketDidStartMutex.RUnlock()
	fake.migrateBucketDidFinishMutex.RLock()
	defer fake.migrateBucketDidFinishMutex.RUnlock()
	fake.migrateBlobDidFailWithErrorMutex.RLock()
	defer fake.migrateBlobDidFailWithErrorMutex.RUnlock()
	fake.migrateBlobDidFinishMutex.RLock()
	defer fake.migrateBlobDidFinishMutex.RUnlock()
	fake.migrateBlobDidFinishPreviouslyMutex.RLock()
	defer fake.migrateBlobDidFinishPreviouslyMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBlobstoreMigrationWatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ goblob.BlobstoreMigrationWatcher = new(FakeBlobstoreMigrationWatcher)
