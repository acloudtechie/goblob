// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"

	"github.com/c0-ops/goblob/ssh"
)

type FakeExecutor struct {
	ExecuteForWriteStub        func(dest io.Writer, command string) error
	executeForWriteMutex       sync.RWMutex
	executeForWriteArgsForCall []struct {
		dest    io.Writer
		command string
	}
	executeForWriteReturns struct {
		result1 error
	}
	ExecuteForReadStub        func(command string) (io.Reader, error)
	executeForReadMutex       sync.RWMutex
	executeForReadArgsForCall []struct {
		command string
	}
	executeForReadReturns struct {
		result1 io.Reader
		result2 error
	}
	SecureCopyStub        func(src string, dest io.Writer) (err error)
	secureCopyMutex       sync.RWMutex
	secureCopyArgsForCall []struct {
		src  string
		dest io.Writer
	}
	secureCopyReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExecutor) ExecuteForWrite(dest io.Writer, command string) error {
	fake.executeForWriteMutex.Lock()
	fake.executeForWriteArgsForCall = append(fake.executeForWriteArgsForCall, struct {
		dest    io.Writer
		command string
	}{dest, command})
	fake.recordInvocation("ExecuteForWrite", []interface{}{dest, command})
	fake.executeForWriteMutex.Unlock()
	if fake.ExecuteForWriteStub != nil {
		return fake.ExecuteForWriteStub(dest, command)
	} else {
		return fake.executeForWriteReturns.result1
	}
}

func (fake *FakeExecutor) ExecuteForWriteCallCount() int {
	fake.executeForWriteMutex.RLock()
	defer fake.executeForWriteMutex.RUnlock()
	return len(fake.executeForWriteArgsForCall)
}

func (fake *FakeExecutor) ExecuteForWriteArgsForCall(i int) (io.Writer, string) {
	fake.executeForWriteMutex.RLock()
	defer fake.executeForWriteMutex.RUnlock()
	return fake.executeForWriteArgsForCall[i].dest, fake.executeForWriteArgsForCall[i].command
}

func (fake *FakeExecutor) ExecuteForWriteReturns(result1 error) {
	fake.ExecuteForWriteStub = nil
	fake.executeForWriteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeExecutor) ExecuteForRead(command string) (io.Reader, error) {
	fake.executeForReadMutex.Lock()
	fake.executeForReadArgsForCall = append(fake.executeForReadArgsForCall, struct {
		command string
	}{command})
	fake.recordInvocation("ExecuteForRead", []interface{}{command})
	fake.executeForReadMutex.Unlock()
	if fake.ExecuteForReadStub != nil {
		return fake.ExecuteForReadStub(command)
	} else {
		return fake.executeForReadReturns.result1, fake.executeForReadReturns.result2
	}
}

func (fake *FakeExecutor) ExecuteForReadCallCount() int {
	fake.executeForReadMutex.RLock()
	defer fake.executeForReadMutex.RUnlock()
	return len(fake.executeForReadArgsForCall)
}

func (fake *FakeExecutor) ExecuteForReadArgsForCall(i int) string {
	fake.executeForReadMutex.RLock()
	defer fake.executeForReadMutex.RUnlock()
	return fake.executeForReadArgsForCall[i].command
}

func (fake *FakeExecutor) ExecuteForReadReturns(result1 io.Reader, result2 error) {
	fake.ExecuteForReadStub = nil
	fake.executeForReadReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeExecutor) SecureCopy(src string, dest io.Writer) (err error) {
	fake.secureCopyMutex.Lock()
	fake.secureCopyArgsForCall = append(fake.secureCopyArgsForCall, struct {
		src  string
		dest io.Writer
	}{src, dest})
	fake.recordInvocation("SecureCopy", []interface{}{src, dest})
	fake.secureCopyMutex.Unlock()
	if fake.SecureCopyStub != nil {
		return fake.SecureCopyStub(src, dest)
	} else {
		return fake.secureCopyReturns.result1
	}
}

func (fake *FakeExecutor) SecureCopyCallCount() int {
	fake.secureCopyMutex.RLock()
	defer fake.secureCopyMutex.RUnlock()
	return len(fake.secureCopyArgsForCall)
}

func (fake *FakeExecutor) SecureCopyArgsForCall(i int) (string, io.Writer) {
	fake.secureCopyMutex.RLock()
	defer fake.secureCopyMutex.RUnlock()
	return fake.secureCopyArgsForCall[i].src, fake.secureCopyArgsForCall[i].dest
}

func (fake *FakeExecutor) SecureCopyReturns(result1 error) {
	fake.SecureCopyStub = nil
	fake.secureCopyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeExecutor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeForWriteMutex.RLock()
	defer fake.executeForWriteMutex.RUnlock()
	fake.executeForReadMutex.RLock()
	defer fake.executeForReadMutex.RUnlock()
	fake.secureCopyMutex.RLock()
	defer fake.secureCopyMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeExecutor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ssh.Executor = new(FakeExecutor)
