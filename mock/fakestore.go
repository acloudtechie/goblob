// This file was generated by counterfeiter
package mock

import (
	"io"
	"sync"

	"github.com/c0-ops/goblob"
)

type FakeStore struct {
	ListStub        func() ([]*goblob.Blob, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct{}
	listReturns     struct {
		result1 []*goblob.Blob
		result2 error
	}
	ReadStub        func(src *goblob.Blob) (io.Reader, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		src *goblob.Blob
	}
	readReturns struct {
		result1 io.Reader
		result2 error
	}
	ChecksumStub        func(src *goblob.Blob) (string, error)
	checksumMutex       sync.RWMutex
	checksumArgsForCall []struct {
		src *goblob.Blob
	}
	checksumReturns struct {
		result1 string
		result2 error
	}
	WriteStub        func(dst *goblob.Blob, src io.Reader) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		dst *goblob.Blob
		src io.Reader
	}
	writeReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) List() ([]*goblob.Blob, error) {
	fake.listMutex.Lock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct{}{})
	fake.recordInvocation("List", []interface{}{})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub()
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *FakeStore) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeStore) ListReturns(result1 []*goblob.Blob, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*goblob.Blob
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Read(src *goblob.Blob) (io.Reader, error) {
	fake.readMutex.Lock()
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		src *goblob.Blob
	}{src})
	fake.recordInvocation("Read", []interface{}{src})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub(src)
	} else {
		return fake.readReturns.result1, fake.readReturns.result2
	}
}

func (fake *FakeStore) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeStore) ReadArgsForCall(i int) *goblob.Blob {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return fake.readArgsForCall[i].src
}

func (fake *FakeStore) ReadReturns(result1 io.Reader, result2 error) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Checksum(src *goblob.Blob) (string, error) {
	fake.checksumMutex.Lock()
	fake.checksumArgsForCall = append(fake.checksumArgsForCall, struct {
		src *goblob.Blob
	}{src})
	fake.recordInvocation("Checksum", []interface{}{src})
	fake.checksumMutex.Unlock()
	if fake.ChecksumStub != nil {
		return fake.ChecksumStub(src)
	} else {
		return fake.checksumReturns.result1, fake.checksumReturns.result2
	}
}

func (fake *FakeStore) ChecksumCallCount() int {
	fake.checksumMutex.RLock()
	defer fake.checksumMutex.RUnlock()
	return len(fake.checksumArgsForCall)
}

func (fake *FakeStore) ChecksumArgsForCall(i int) *goblob.Blob {
	fake.checksumMutex.RLock()
	defer fake.checksumMutex.RUnlock()
	return fake.checksumArgsForCall[i].src
}

func (fake *FakeStore) ChecksumReturns(result1 string, result2 error) {
	fake.ChecksumStub = nil
	fake.checksumReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Write(dst *goblob.Blob, src io.Reader) error {
	fake.writeMutex.Lock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		dst *goblob.Blob
		src io.Reader
	}{dst, src})
	fake.recordInvocation("Write", []interface{}{dst, src})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(dst, src)
	} else {
		return fake.writeReturns.result1
	}
}

func (fake *FakeStore) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeStore) WriteArgsForCall(i int) (*goblob.Blob, io.Reader) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].dst, fake.writeArgsForCall[i].src
}

func (fake *FakeStore) WriteReturns(result1 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	fake.checksumMutex.RLock()
	defer fake.checksumMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ goblob.Store = new(FakeStore)
