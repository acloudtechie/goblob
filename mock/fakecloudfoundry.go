// This file was generated by counterfeiter
package mock

import (
	"sync"

	"github.com/c0-ops/goblob"
)

type FakeCloudFoundry struct {
	IdentifierStub        func() string
	identifierMutex       sync.RWMutex
	identifierArgsForCall []struct{}
	identifierReturns     struct {
		result1 string
	}
	EnableBitsStub        func() error
	enableBitsMutex       sync.RWMutex
	enableBitsArgsForCall []struct{}
	enableBitsReturns     struct {
		result1 error
	}
	DisableBitsStub        func() error
	disableBitsMutex       sync.RWMutex
	disableBitsArgsForCall []struct{}
	disableBitsReturns     struct {
		result1 error
	}
	ReconfigureStub        func(dst goblob.Store) error
	reconfigureMutex       sync.RWMutex
	reconfigureArgsForCall []struct {
		dst goblob.Store
	}
	reconfigureReturns struct {
		result1 error
	}
	StoreStub        func() (goblob.Store, error)
	storeMutex       sync.RWMutex
	storeArgsForCall []struct{}
	storeReturns     struct {
		result1 goblob.Store
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudFoundry) Identifier() string {
	fake.identifierMutex.Lock()
	fake.identifierArgsForCall = append(fake.identifierArgsForCall, struct{}{})
	fake.recordInvocation("Identifier", []interface{}{})
	fake.identifierMutex.Unlock()
	if fake.IdentifierStub != nil {
		return fake.IdentifierStub()
	} else {
		return fake.identifierReturns.result1
	}
}

func (fake *FakeCloudFoundry) IdentifierCallCount() int {
	fake.identifierMutex.RLock()
	defer fake.identifierMutex.RUnlock()
	return len(fake.identifierArgsForCall)
}

func (fake *FakeCloudFoundry) IdentifierReturns(result1 string) {
	fake.IdentifierStub = nil
	fake.identifierReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCloudFoundry) EnableBits() error {
	fake.enableBitsMutex.Lock()
	fake.enableBitsArgsForCall = append(fake.enableBitsArgsForCall, struct{}{})
	fake.recordInvocation("EnableBits", []interface{}{})
	fake.enableBitsMutex.Unlock()
	if fake.EnableBitsStub != nil {
		return fake.EnableBitsStub()
	} else {
		return fake.enableBitsReturns.result1
	}
}

func (fake *FakeCloudFoundry) EnableBitsCallCount() int {
	fake.enableBitsMutex.RLock()
	defer fake.enableBitsMutex.RUnlock()
	return len(fake.enableBitsArgsForCall)
}

func (fake *FakeCloudFoundry) EnableBitsReturns(result1 error) {
	fake.EnableBitsStub = nil
	fake.enableBitsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundry) DisableBits() error {
	fake.disableBitsMutex.Lock()
	fake.disableBitsArgsForCall = append(fake.disableBitsArgsForCall, struct{}{})
	fake.recordInvocation("DisableBits", []interface{}{})
	fake.disableBitsMutex.Unlock()
	if fake.DisableBitsStub != nil {
		return fake.DisableBitsStub()
	} else {
		return fake.disableBitsReturns.result1
	}
}

func (fake *FakeCloudFoundry) DisableBitsCallCount() int {
	fake.disableBitsMutex.RLock()
	defer fake.disableBitsMutex.RUnlock()
	return len(fake.disableBitsArgsForCall)
}

func (fake *FakeCloudFoundry) DisableBitsReturns(result1 error) {
	fake.DisableBitsStub = nil
	fake.disableBitsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundry) Reconfigure(dst goblob.Store) error {
	fake.reconfigureMutex.Lock()
	fake.reconfigureArgsForCall = append(fake.reconfigureArgsForCall, struct {
		dst goblob.Store
	}{dst})
	fake.recordInvocation("Reconfigure", []interface{}{dst})
	fake.reconfigureMutex.Unlock()
	if fake.ReconfigureStub != nil {
		return fake.ReconfigureStub(dst)
	} else {
		return fake.reconfigureReturns.result1
	}
}

func (fake *FakeCloudFoundry) ReconfigureCallCount() int {
	fake.reconfigureMutex.RLock()
	defer fake.reconfigureMutex.RUnlock()
	return len(fake.reconfigureArgsForCall)
}

func (fake *FakeCloudFoundry) ReconfigureArgsForCall(i int) goblob.Store {
	fake.reconfigureMutex.RLock()
	defer fake.reconfigureMutex.RUnlock()
	return fake.reconfigureArgsForCall[i].dst
}

func (fake *FakeCloudFoundry) ReconfigureReturns(result1 error) {
	fake.ReconfigureStub = nil
	fake.reconfigureReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundry) Store() (goblob.Store, error) {
	fake.storeMutex.Lock()
	fake.storeArgsForCall = append(fake.storeArgsForCall, struct{}{})
	fake.recordInvocation("Store", []interface{}{})
	fake.storeMutex.Unlock()
	if fake.StoreStub != nil {
		return fake.StoreStub()
	} else {
		return fake.storeReturns.result1, fake.storeReturns.result2
	}
}

func (fake *FakeCloudFoundry) StoreCallCount() int {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return len(fake.storeArgsForCall)
}

func (fake *FakeCloudFoundry) StoreReturns(result1 goblob.Store, result2 error) {
	fake.StoreStub = nil
	fake.storeReturns = struct {
		result1 goblob.Store
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.identifierMutex.RLock()
	defer fake.identifierMutex.RUnlock()
	fake.enableBitsMutex.RLock()
	defer fake.enableBitsMutex.RUnlock()
	fake.disableBitsMutex.RLock()
	defer fake.disableBitsMutex.RUnlock()
	fake.reconfigureMutex.RLock()
	defer fake.reconfigureMutex.RUnlock()
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCloudFoundry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ goblob.CloudFoundry = new(FakeCloudFoundry)
